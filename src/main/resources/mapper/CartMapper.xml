<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team119.petmily.mapperInterface.CartMapper">

	<!-- 1. selectList -->
<!-- 	<select id="selectList" resultType="com.team119.petmily.domain.CartDTO"> -->
<!-- 		select * from cart order by user_id asc -->
<!-- 	</select> -->
	<select id="selectList" resultType="com.team119.petmily.domain.CartDTO">
		SELECT c.user_id, c.product_id, c.product_cnt, p.product_name, p.product_price, p.product_mainimagepath, pp.promotion_discount
		FROM cart c
		INNER JOIN product p ON c.product_id = p.product_id
		INNER JOIN promotion_product pp ON p.promotion_id = pp.promotion_id
		WHERE c.user_id = #{user_id}
	</select>
	
	<!-- 2. selectOne: Detail -->
	<select id="selectOne" resultType="com.team119.petmily.domain.CartDTO">
		select * from cart where user_id = #{user_id} and product_id = #{product_id}
	</select>

	<!-- 3. delete -->
	<delete id="delete">
		delete from cart where user_id = #{user_id} and product_id = #{product_id}
	</delete>
	<delete id="deleteP">
		delete from cart where user_id = #{user_id}
	</delete>
	
	<!-- 4. insert -->
    <insert id="insert">
        INSERT INTO cart (user_id, product_id, product_cnt)
        VALUES (#{param1}, #{param2}, #{param3})
        ON DUPLICATE KEY UPDATE product_cnt = product_cnt + #{param3}
    </insert>

    <insert id="insertP">
        INSERT INTO cart (user_id, product_id)
		VALUES (#{param1}, #{param2})
		ON DUPLICATE KEY UPDATE product_cnt = product_cnt + 1
    </insert>
	
	<!-- 5. update -->
	<update id="update">
		update cart set
		user_id=#{user_id}, product_id=#{product_id}, product_cnt=#{product_cnt}
		where user_id = #{user_id} and product_id = #{product_id}
	</update>
	<update id="upCnt">
		update cart set product_cnt=product_cnt+1
		where user_id = #{param1} and product_id = #{param2}
	</update>
	<update id="downCnt">
		update cart set product_cnt=product_cnt-1
		where user_id = #{param1} and product_id = #{param2}
	</update>
	
	<!-- ** Board_SearchCri_Paging 
	=> ver02_MySql
		-> 검색조건: title에 Spring이 포함된 글목록
		select * from board
		where title LIKE '%Spring%'
		order by root desc, step asc
		limit #{sno}, #{rowsPerPage}
	=> 해결
		-> title : cri의 searchType 컬럼 -> ${searchType}
		-> '%Spring%' : cri의 keyword 
						-> % + #{keyword} + %
						-> MySql 문법은 불편 : CONCAT('%',#{keyword},'%')
						-> Mybatis 구문이 편리
	=> search SQL 
		-> % 기호의 문자열 연결 처리
		-> LIKE 조건문		
	--> 
	<sql id="search">
		<!-- 1) CONCAT('%',#{keyword},'%') 처리 -->
		<if test="keyword!=null">
			<bind name="keyVal" value="'%'+keyword+'%'"/>
		</if>
		<!-- 2) LIKE 조건문 -->
		<choose>
			<when test="searchType!=null and searchType!='all'">
				and ${searchType} LIKE #{keyVal} )
			</when>	
			<when test="searchType=='all' and keyword!=null">
				and ( user_id LIKE #{keyVal}
				      OR product_id LIKE #{keyVal} ) )
			</when>
			<otherwise>)</otherwise>
		</choose>
	</sql>
	<select id="searchCri" resultType="com.team119.petmily.domain.CartDTO">
		select * from cart
			where ( product_id >0 <include refid="search"></include>
			order by user_id asc
			limit #{sno}, #{rowsPerPage}
	</select>
	<select id="searchTotalCount" resultType="int">
		select count(*) from cart
			where ( product_id >0 <include refid="search"></include>
	</select>
	
	<!-- ** Board_Cri_Paging ********************************
		=> ver01_MySql
			limit a, b ( a개 제외하고 a+1 부터 b개 )  적용 -->
	<select id="bcriList" resultType="com.team119.petmily.domain.CartDTO">
		select * from cart
		order by user_id asc
		limit #{sno}, #{rowsPerPage}
	</select>
	<select id="criTotalCount" resultType="int">
		select count(*) from cart order
	</select>
	
	<!-- MyPage************************************************* -->
	
	<select id="getReviewList" resultType="com.team119.petmily.domain.ReviewDTO">
		SELECT REVIEW.*, P.PRODUCT_NAME, P.PRODUCT_MAINIMAGEPATH
	    FROM REVIEW
	    LEFT JOIN PRODUCT P ON P.PRODUCT_ID = REVIEW.PRODUCT_ID
		WHERE (#{searchPeriod} IS NULL OR
		    CASE 
		        WHEN 'week' = #{searchPeriod} THEN REVIEW_REGDATE >= DATE_SUB(NOW(), INTERVAL 1 WEEK)
		        WHEN 'month' = #{searchPeriod} THEN REVIEW_REGDATE >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
		        WHEN 'firstQuarter' = #{searchPeriod} THEN REVIEW_REGDATE >= DATE_SUB(NOW(), INTERVAL 3 MONTH)
		        ELSE 1=1
		    END)
		AND (#{searchCriteria} IS NULL OR
		    CASE 
		        WHEN 'subject' = #{searchCriteria} THEN LOWER(REVIEW_TITLE) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'content' = #{searchCriteria} THEN LOWER(REVIEW_CONTENT) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'writer' = #{searchCriteria} THEN LOWER(REVIEW_WRITER) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        ELSE 1=1
		    END)
		AND REVIEW_WRITER= #{REVIEW_WRITER}
		ORDER BY REVIEW_REGDATE DESC;
	</select>
	
	<select id="getInquiryList" resultType="com.team119.petmily.domain.InquiryDTO">
		SELECT INQUIRY.*, 
		(SELECT P.PRODUCT_NAME 
	     FROM PRODUCT P 
	     WHERE P.PRODUCT_ID = INQUIRY.PRODUCT_ID) AS PRODUCT_NAME
		FROM INQUIRY
		WHERE (#{searchPeriod} IS NULL OR
		    CASE 
		        WHEN 'week' = #{searchPeriod} THEN INQUIRY_REGDATE >= DATE_SUB(NOW(), INTERVAL 1 WEEK)
		        WHEN 'month' = #{searchPeriod} THEN INQUIRY_REGDATE >= DATE_SUB(NOW(), INTERVAL 1 MONTH)
		        WHEN 'firstQuarter' = #{searchPeriod} THEN INQUIRY_REGDATE >= DATE_SUB(NOW(), INTERVAL 3 MONTH)
		        ELSE 1=1
		    END)
		AND (#{searchCriteria} IS NULL OR
		    CASE 
		        WHEN 'subject' = #{searchCriteria} THEN LOWER(INQUIRY_TITLE) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'content' = #{searchCriteria} THEN LOWER(INQUIRY_CONTENT) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        WHEN 'writer' = #{searchCriteria} THEN LOWER(INQUIRY_WRITER) LIKE CONCAT('%', LOWER(#{searchWord}), '%')
		        ELSE 1=1
		    END)
		AND REVIEW_WRITER= #{REVIEW_WRITER}
		ORDER BY INQUIRY_REGDATE DESC;
	</select>
</mapper>